Day 1 - Prompting

	how to get started with the Gemini API and some of the example prompts and techniques that you can also read about in the Prompting whitepaper. 

	Before you begin
		exploring prompting using the Python SDK and AI Studio. 

		TextFX is a suite of AI-powered tools for rappers - https://textfx.withgoogle.com/
		SQL Talk shows how you can talk directly to a database using the Gemini API, - https://sql-talk-r5gdynozbq-uc.a.run.app/
		NotebookLM uses Gemini models to build your own personal AI research assistant.- https://notebooklm.google/
		Gemini 2.0! - use the Gemini 2.0 family of models.
		Get GOOGLE_API_KEY from Google AI Studio (https://aistudio.google.com). Add Kaggle Notebook -> Add-ons ->  Secret (Kaggle User).

	Install the SDK
		!pip uninstall -qqy jupyterlab  # Remove unused packages from Kaggle's base image that conflict
		!pip install -U -q "google-genai==1.7.0"

	Import the SDK and some helpers for rendering the output.
		from google import genai
		from google.genai import types

		from IPython.display import HTML, Markdown, display

	Set up a retry helper. This allows you to "Run all" without worrying about per-minute quota.
		from google.api_core import retry

		is_retriable = lambda e: (isinstance(e, genai.errors.APIError) and e.code in {429, 503})

		genai.models.Models.generate_content = retry.Retry(
		    predicate=is_retriable)(genai.models.Models.generate_content)

	Set up your API key
			from kaggle_secrets import UserSecretsClient

			GOOGLE_API_KEY = UserSecretsClient().get_secret("GOOGLE_API_KEY")

	Run your first prompt
		Test that your API key is set up correctly by making a request.
		The Python SDK uses a Client object to make requests to the API. The client control which back-end to use (between Gemini API and Vertex AI) and handles authentication (API key).
		The gemini-2.0-flash model has been selected here.

			client = genai.Client(api_key=GOOGLE_API_KEY)

			response = client.models.generate_content(
			    model="gemini-2.0-flash",
			    contents="Explain AI to me like I'm a kid.")

			print(response.text)

				Okay, imagine you have a really, really smart robot. But instead of building it out of metal and wires, ....
				...
				*   **Recognizing Your Face:** .....
				.....
		
		The response often comes back in markdown format, which you can render directly in this notebook.

			Markdown(response.text)

	Start a chat
		The previous example uses a single-turn, text-in/text-out structure, but you can also set up a multi-turn chat structure too.

			chat = client.chats.create(model='gemini-2.0-flash', history=[])
			response = chat.send_message('Hello! My name is Zlork.')
			print(response.text)

				Nice to meet you, Zlork! It's a pleasure to make your acquaintance. Is there anything I can help you with today?

			response = chat.send_message('Can you tell me something interesting about dinosaurs?')
			print(response.text)

				Okay, here's a fun and interesting fact about dinosaurs:....
		
		While you have the chat object alive, the conversation state persists. Confirm that by asking if it knows the user's name.

			response = chat.send_message('Do you remember what my name is?')
			print(response.text)
				
				Yes, your name is Zlork.

	Choose a model
		The Gemini API provides access to a number of models from the Gemini model family. Use the API to list all of the available models.

			for model in client.models.list():
			  print(model.name)

				models/chat-bison-001
				models/text-bison-001
				models/embedding-gecko-001
				....
				
		The models.list response also returns additional information about the model's capabilities, like the token limits and supported parameters.

			from pprint import pprint

			for model in client.models.list():
			  if model.name == 'models/gemini-2.0-flash':
			    pprint(model.to_json_dict())
			    break

				{'description': 'Gemini 2.0 Flash',
				 'display_name': 'Gemini 2.0 Flash',
				 'input_token_limit': 1048576,
				 'name': 'models/gemini-2.0-flash',
				 'output_token_limit': 8192,
				 'supported_actions': ['generateContent', 'countTokens'],
				 'tuned_model_info': {},
				 'version': '2.0'}
				 
	Explore generation parameters
	----------------------------
	Output length (max_output_tokens parameter)
		When generating text with an LLM, the output length affects cost and performance. 
		Generating more tokens increases computation, leading to higher energy consumption, latency, and cost.

		To stop the model from generating tokens past a limit. Specify the max_output_tokens parameter, this parameter does not influence the generation of the output tokens, 
		so the output will not become more stylistically or textually succinct, but it will stop generating tokens once the specified length is reached. 
		Prompt engineering may be required to generate a more complete output for your given limit.

			from google.genai import types

			short_config = types.GenerateContentConfig(max_output_tokens=200)

			response = client.models.generate_content(
			    model='gemini-2.0-flash',
			    config=short_config,
			    contents='Write a 1000 word essay on the importance of olives in modern society.')

			print(response.text)
				## The Humble Olive: A Cornerstone of Modern Society ....
				
		My Note : output text contains 928 characters (including spaces). Approximately 180â€“200 tokens, Token count varies based on factors like word length and punctuation, 
		as most tokens are around 4 characters on average in English.
		
			response = client.models.generate_content(
			    model='gemini-2.0-flash',
			    config=short_config,
			    contents='Write a short poem on the importance of olives in modern society.')

			print(response.text)

	Temperature
		Temperature controls the degree of randomness in token selection. 
		Higher temperatures result in a higher number of candidate tokens from which the next output token is selected, and can produce more diverse results, 
		while lower temperatures have the opposite effect, such that a temperature of 0 results in greedy decoding, selecting the most probable token at each step.

		Temperature doesn't provide any guarantees of randomness, but it can be used to "nudge" the output somewhat.

			high_temp_config = types.GenerateContentConfig(temperature=2.0)

			for _ in range(5):
			  response = client.models.generate_content(
			      model='gemini-2.0-flash',
			      config=high_temp_config,
			      contents='Pick a random colour... (respond in a single word)')

			  if response.text:
			    print(response.text)
			    
				Magenta, Magenta, Purple, Turquoise, Orange

		
		Now try with temperature set to zero. Note that the output is not completely deterministic, as other parameters affect token selection, but the results will tend to be more stable.

			low_temp_config = types.GenerateContentConfig(temperature=0.0)

			for _ in range(5):
			  response = client.models.generate_content(
			      model='gemini-2.0-flash',
			      config=low_temp_config,
			      contents='Pick a random colour... (respond in a single word)')

			  if response.text:
			    print(response.text, '-' * 25)

				Azure, Azure, Azure, Azure, Azure (yes it's color)
				
	Top-P
		Like temperature, the top-P parameter is also used to control the diversity of the model's output.
		
		Top-P defines the probability threshold that, once cumulatively exceeded, tokens stop being selected as candidates. 
		A top-P of 0 is typically equivalent to greedy decoding, and a top-P of 1 typically selects every token in the model's vocabulary.
		
		See top-K referenced in LLM literature. Top-K is not configurable in the Gemini 2.0 series of models, but can be changed in older models. 
		Top-K is a positive integer that defines the number of most probable tokens from which to select the output token. A top-K of 1 selects a single token, performing greedy decoding.
		
		Run this example a number of times, change the settings and observe the change in output.

			model_config = types.GenerateContentConfig(
			    # These are the default values for gemini-2.0-flash.
			    temperature=1.0,
			    top_p=0.95,
			)

			story_prompt = "You are a creative writer. Write a short story about a cat who goes on an adventure."
			response = client.models.generate_content(
			    model='gemini-2.0-flash',
			    config=model_config,
			    contents=story_prompt)

			print(response.text)
				
				Clementine, a ginger tabby with eyes like melted amber, ...
				
	Prompting
	----------
		Try changing the text here to see how each prompt performs with different instructions, more examples, or any other changes you can think of.

	Zero-shot
		Zero-shot prompts are prompts that describe the request for the model directly.

			model_config = types.GenerateContentConfig(
			    temperature=0.1,
			    top_p=1,
			    max_output_tokens=5,
			)

			zero_shot_prompt = """Classify movie reviews as POSITIVE, NEUTRAL or NEGATIVE.
			Review: "Her" is a disturbing study revealing the direction
			humanity is headed if AI is allowed to keep evolving,
			unchecked. I wish there were more movies like this masterpiece.
			Sentiment: """

			response = client.models.generate_content(
			    model='gemini-2.0-flash',
			    config=model_config,
			    contents=zero_shot_prompt)

			print(response.text)
			
				POSITIVE


	Enum mode
		The models are trained to generate text, and while the Gemini 2.0 models are great at following instructions, other models can sometimes produce more text than you may wish for. 
		In the preceding example, the model will output the label, but sometimes it can include a preceding "Sentiment" label, and without an output token limit, 
		it may also add explanatory text afterwards. See the below prompt in AI Studio for an example.
			
			Sentiment: POSITIVE
			
			The review praises the movie as a "masterpiece" and expresses a wish for more films like it. 
			While it mentions the movie being "disturbing," this is presented within the context of a positive overall assessment.

		The Gemini API has an Enum mode (https://github.com/google-gemini/cookbook/blob/main/quickstarts/Enum.ipynb) feature that allows you to constrain the output to a fixed set of values.

			import enum

			class Sentiment(enum.Enum):
			    POSITIVE = "positive"
			    NEUTRAL = "neutral"
			    NEGATIVE = "negative"


			response = client.models.generate_content(
			    model='gemini-2.0-flash',
			    config=types.GenerateContentConfig(
				response_mime_type="text/x.enum",
				response_schema=Sentiment
			    ),
			    contents=zero_shot_prompt)

			print(response.text)
			
				positive

		When using constrained output like an enum, the Python SDK will attempt to convert the model's text response into a Python object automatically. 
		It's stored in the response.parsed field.

			enum_response = response.parsed
			print(enum_response)
			print(type(enum_response))
				
				Sentiment.POSITIVE
				<enum 'Sentiment'>
				
	One-shot and few-shot
		Providing an example of the expected response is known as a "one-shot" prompt. When you provide multiple examples, it is a "few-shot" prompt.

			few_shot_prompt = """Parse a customer's pizza order into valid JSON:

			EXAMPLE:
			I want a small pizza with cheese, tomato sauce, and pepperoni.
			JSON Response:
			```
			{
			"size": "small",
			"type": "normal",
			"ingredients": ["cheese", "tomato sauce", "pepperoni"]
			}
			```

			EXAMPLE:
			Can I get a large pizza with tomato sauce, basil and mozzarella
			JSON Response:
			```
			{
			"size": "large",
			"type": "normal",
			"ingredients": ["tomato sauce", "basil", "mozzarella"]
			}
			```

			ORDER:
			"""

			customer_order = "Give me a large with cheese & pineapple"

			response = client.models.generate_content(
			    model='gemini-2.0-flash',
			    config=types.GenerateContentConfig(
				temperature=0.1,
				top_p=1,
				max_output_tokens=250,
			    ),
			    contents=[few_shot_prompt, customer_order])

			print(response.text)
			
				```json
				{
				"size": "large",
				"type": "normal",
				"ingredients": ["cheese", "pineapple"]
				}
				```

	JSON mode
		To provide control over the schema, and to ensure that you only receive JSON (with no other text or markdown), you can use the Gemini API's JSON mode. 
		This forces the model to constrain decoding, such that token selection is guided by the supplied schema.

			import typing_extensions as typing

			class PizzaOrder(typing.TypedDict):
			    size: str
			    ingredients: list[str]
			    type: str


			response = client.models.generate_content(
			    model='gemini-2.0-flash',
			    config=types.GenerateContentConfig(
				temperature=0.1,
				response_mime_type="application/json",
				response_schema=PizzaOrder,
			    ),
			    contents="Can I have a large dessert pizza with apple and chocolate")

			print(response.text)
			
				{
				  "size": "large",
				  "ingredients": ["apple", "chocolate"],
				  "type": "dessert"
				}
				
	Chain of Thought (CoT)
		Direct prompting on LLMs can return answers quickly and (in terms of output token usage) efficiently, but they can be prone to hallucination. 
		The answer may "look" correct (in terms of language and syntax) but is incorrect in terms of factuality and reasoning.

		COT prompting is a technique where you instruct the model to output intermediate reasoning steps and it typically gets better results, especially when combined with few-shot examples. 
		It is worth noting that this technique doesn't completely eliminate hallucinations, and that it tends to cost more to run, due to the increased token count.

		Models like the Gemini family are trained to be "chatty" or "thoughtful" and will provide reasoning steps without prompting, 
		so for this simple example you can ask the model to be more direct in the prompt to force a non-reasoning response. 
		Try re-running this step if the model gets lucky and gets the answer correct on the first try.

			prompt = """When I was 4 years old, my partner was 3 times my age. Now, I
			am 20 years old. How old is my partner? Return the answer directly."""

			response = client.models.generate_content(
			    model='gemini-2.0-flash',
			    contents=prompt)

			print(response.text)

				68

		Now try the same approach, but indicate to the model that it should "think step by step".

			prompt = """When I was 4 years old, my partner was 3 times my age. Now,
			I am 20 years old. How old is my partner? Let's think step by step."""

			response = client.models.generate_content(
			    model='gemini-2.0-flash',
			    contents=prompt)

			Markdown(response.text)

				Here's how to solve the problem step-by-step:
				
				Find the age difference: When you were 4, your partner was 3 times your age, meaning they were 4 * 3 = 12 years old.
				Calculate the age difference: The age difference between you and your partner is 12 - 4 = 8 years.
				Determine your partner's current age: Since you are now 20, and your partner is 8 years older, they are currently 20 + 8 = 28 years old.
				
				Answer: Your partner is currently 28 years old.

	ReAct: Reason and act
		Run a ReAct prompt directly in the Gemini API and perform the searching steps yourself. 
		As this prompt follows a well-defined structure, there are frameworks available that wrap the prompt into easier-to-use APIs that make tool calls automatically, 
		such as the LangChain example from the "Prompting" whitepaper.

		To try this out with the Wikipedia search engine, check out the Searching Wikipedia with ReAct cookbook example.

		Note: The prompt and in-context examples used here are from https://github.com/ysymyth/ReAct or  Come up with more examples yourself
		
			model_instructions = """
			Solve a question answering task with interleaving Thought, Action, Observation steps. Thought can reason about the current situation,
			Observation is understanding relevant information from an Action's output and Action can be one of three types:
			 (1) <search>entity</search>, which searches the exact entity on Wikipedia and returns the first paragraph if it exists. If not, it
			     will return some similar entities to search and you can try to search the information from those topics.
			 (2) <lookup>keyword</lookup>, which returns the next sentence containing keyword in the current context. This only does exact matches,
			     so keep your searches short.
			 (3) <finish>answer</finish>, which returns the answer and finishes the task.
			"""

			example1 = """Question
			Musician and satirist Allie Goertz wrote a song about the "The Simpsons" character Milhouse, who Matt Groening named after who?
			
			Thought 1
			The question simplifies to "The Simpsons" character Milhouse is named after who. I only need to search Milhouse and find who it is named after.
			
			Action 1
			<search>Milhouse</search>
			
			Observation 1
			Milhouse Mussolini Van Houten is a recurring character in the Fox animated television series The Simpsons voiced by Pamela Hayden and created by Matt Groening.
			
			Thought 2
			The paragraph does not tell who Milhouse is named after, maybe I can look up "named after".
			
			Action 2
			<lookup>named after</lookup>
			
			Observation 2
			Milhouse was named after U.S. president Richard Nixon, whose middle name was Milhous.
			
			Thought 3
			Milhouse was named after U.S. president Richard Nixon, so the answer is Richard Nixon.
			
			Action 3
			<finish>Richard Nixon</finish>
			"""

			example2 = """Question
			What is the elevation range for the area that the eastern sector of the Colorado orogeny extends into?

			Thought 1
			I need to search Colorado orogeny, find the area that the eastern sector of the Colorado orogeny extends into, then find the elevation range of the area.

			Action 1
			<search>Colorado orogeny</search>

			Observation 1
			The Colorado orogeny was an episode of mountain building (an orogeny) in Colorado and surrounding areas.

			Thought 2
			It does not mention the eastern sector. So I need to look up eastern sector.

			Action 2
			<lookup>eastern sector</lookup>

			Observation 2
			The eastern sector extends into the High Plains and is called the Central Plains orogeny.

			Thought 3
			The eastern sector of Colorado orogeny extends into the High Plains. So I need to search High Plains and find its elevation range.

			Action 3
			<search>High Plains</search>

			Observation 3
			High Plains refers to one of two distinct land regions

			Thought 4
			I need to instead search High Plains (United States).

			Action 4
			<search>High Plains (United States)</search>

			Observation 4
			The High Plains are a subregion of the Great Plains. From east to west, the High Plains rise in elevation from around 1,800 to 7,000 ft (550 to 2,130m).

			Thought 5
			High Plains rise in elevation from around 1,800 to 7,000 ft, so the answer is 1,800 to 7,000 ft.

			Action 5
			<finish>1,800 to 7,000 ft</finish>
			"""
		
		To capture a single step at a time, while ignoring any hallucinated Observation steps, you will use stop_sequences to end the generation process. 
		The steps are Thought, Action, Observation, in that order.

			question = """Question
			Who was the youngest author listed on the transformers NLP paper?
			"""

			# You will perform the Action; so generate up to, but not including, the Observation.
			react_config = types.GenerateContentConfig(
			    stop_sequences=["\nObservation"],
			    system_instruction=model_instructions + example1 + example2,
			)

			# Create a chat that has the model instructions and examples pre-seeded.
			react_chat = client.chats.create(
			    model='gemini-2.0-flash',
			    config=react_config,
			)

			resp = react_chat.send_message(question)
			print(resp.text)
			
				Thought 1
				I need to find the transformers NLP paper and then find the youngest author listed on the paper.

				Action 1
				<search>transformers NLP paper</search>

			Now you can perform this research yourself and supply it back to the model.

			observation = """Observation 1
			[1706.03762] Attention Is All You Need
			Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, Illia Polosukhin
			We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely.
			"""
			resp = react_chat.send_message(observation)
			print(resp.text)
			
				Thought 2
				Now I need to find the youngest author from the list: Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, 
				Aidan N. Gomez, Lukasz Kaiser, Illia Polosukhin.
				I don't know their ages, I need to search them and find the youngest one.

				Action 2
				<search>Ashish Vaswani age</search>

			This process repeats until the <finish> action is reached. You can continue running this yourself if you like, 
			or try the Wikipedia example to see a fully automated ReAct system at work.

	Thinking mode
		The experiemental Gemini Flash 2.0 "Thinking" model has been trained to generate the "thinking process" the model goes through as part of its response. 
		As a result, the Flash Thinking model is capable of stronger reasoning capabilities in its responses.

		Using a "thinking mode" model can provide you with high-quality responses without needing specialised prompting like the previous approaches. 
		One reason this technique is effective is that you induce the model to generate relevant information ("brainstorming", or "thoughts") 
		that is then used as part of the context in which the final response is generated.

		Note that when you use the API, you get the final response from the model, but the thoughts are not captured. 
	
			import io
			from IPython.display import Markdown, clear_output

			response = client.models.generate_content_stream(
			    model='gemini-2.0-flash-thinking-exp',
			    contents='Who was the youngest author listed on the transformers NLP paper?',
			)

			buf = io.StringIO()
			for chunk in response:
			    buf.write(chunk.text)
			    # Display the response as it is streamed
			    print(chunk.text, end='')

			# And then render the finished response as formatted markdown.
			clear_output()
			Markdown(buf.getvalue())
				
				The youngest author listed on the "Attention is All You Need" paper, ....
				
	Code prompting
	--------------
	Generating code
		The Gemini family of models can be used to generate code, configuration and scripts. 
		Generating code can be helpful when learning to code, learning a new language or for rapidly generating a first draft.

		It's important to be aware that since LLMs can make mistakes, and can repeat training data, it's essential to read and test your code first, and comply with any relevant licenses.

			# The Gemini models love to talk, so it helps to specify they stick to the code if that
			# is all that you want.
			code_prompt = """
			Write a Python function to calculate the factorial of a number. No explanation, provide only the code.
			"""

			response = client.models.generate_content(
			    model='gemini-2.0-flash',
			    config=types.GenerateContentConfig(
				temperature=1,
				top_p=1,
				max_output_tokens=1024,
			    ),
			    contents=code_prompt)

			Markdown(response.text)
			
				def factorial(n):
				    if n == 0:
					return 1
				    else:
					return n * factorial(n-1)
					
	Code execution
		The Gemini API can automatically run generated code too, and will return the output.

			from pprint import pprint

			config = types.GenerateContentConfig(
			    tools=[types.Tool(code_execution=types.ToolCodeExecution())],
			)

			code_exec_prompt = """
			Generate the first 14 odd prime numbers, then calculate their sum.
			"""

			response = client.models.generate_content(
			    model='gemini-2.0-flash',
			    config=config,
			    contents=code_exec_prompt)

			for part in response.candidates[0].content.parts:
			  pprint(part.to_json_dict())
			  print("-----")
			  
				{'text': 'Okay, I can do that. First, I will identify the first 14 odd prime '
					 'numbers, and then I will calculate their sum. Prime numbers are '
					 'numbers greater than 1 that have only two divisors: 1 and '
					 'themselves. The first few prime numbers are 2, 3, 5, 7, 11, and so '
					 "on. Since I need the odd prime numbers, I'll exclude 2 from the "
					 'list.\n'
					 '\n'
					 "Here's how I'll approach this:\n"
					 '1.  List prime numbers, excluding 2, until I have 14 odd prime '
					 'numbers.\n'
					 '2.  Sum these 14 numbers.\n'
					 '\n'}
				-----
				{'executable_code': {'code': 'primes = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, '
							     '37, 41, 43, 47]\n'
							     'sum_of_primes = sum(primes)\n'
							     "print(f'{primes=}')\n"
							     "print(f'{sum_of_primes=}')\n",
						     'language': 'PYTHON'}}
				-----
				{'code_execution_result': {'outcome': 'OUTCOME_OK',
							   'output': 'primes=[3, 5, 7, 11, 13, 17, 19, 23, 29, '
								     '31, 37, 41, 43, 47]\n'
								     'sum_of_primes=326\n'}}
				-----
				{'text': 'The first 14 odd prime numbers are 3, 5, 7, 11, 13, 17, 19, 23, 29, '
					 '31, 37, 41, 43, and 47. Their sum is 326.\n'}
				-----
		This response contains multiple parts, including an opening and closing text part that represent regular responses, 
		an executable_code part that represents generated code and a code_execution_result part that represents the results from running the generated code.

		You can explore them individually.

			for part in response.candidates[0].content.parts:
			    if part.text:
				display(Markdown(part.text))
			    elif part.executable_code:
				display(Markdown(f'```python\n{part.executable_code.code}\n```'))
			    elif part.code_execution_result:
				if part.code_execution_result.outcome != 'OUTCOME_OK':
				    display(Markdown(f'## Status {part.code_execution_result.outcome}'))

				display(Markdown(f'```\n{part.code_execution_result.output}\n```'))

				Okay, I can do that. First, I will identify the first 14 odd prime numbers, ...
				
	Explaining code
		The Gemini family of models can explain code to you too. In this example, you pass a bash script and ask some questions.

			file_contents = !curl https://raw.githubusercontent.com/magicmonty/bash-git-prompt/refs/heads/master/gitprompt.sh

			explain_prompt = f"""
			Please explain what this file does at a very high level. What is it, and why would I use it?

			```
			{file_contents}
			```
			"""

			response = client.models.generate_content(
			    model='gemini-2.0-flash',
			    contents=explain_prompt)

			Markdown(response.text)
			
				This file is a Bash/Zsh ....
---------------------------------------------------------------------------------------------
Day 1 - Evaluation and structured output

	Learn some techniques for evaluating the output of a language model. 
	As part of the evaluation, you will also use Gemini's structured data capability to produce evaluation results as instances of Python types.

	Setup
	Install the Python SDK.

		!pip install -Uq "google-genai==1.7.0"

		from google import genai
		from google.genai import types

		from IPython.display import Markdown, display

	Set up your API key - GOOGLE_API_KEY

		from kaggle_secrets import UserSecretsClient

		client = genai.Client(api_key=UserSecretsClient().get_secret("GOOGLE_API_KEY"))
	
	Automated retry - This codelab sends a lot of requests, so set up an automatic retry that ensures your requests are retried when per-minute quota is reached.

		from google.api_core import retry

		is_retriable = lambda e: (isinstance(e, genai.errors.APIError) and e.code in {429, 503})

		if not hasattr(genai.models.Models.generate_content, '__wrapped__'):
		  genai.models.Models.generate_content = retry.Retry(
		      predicate=is_retriable)(genai.models.Models.generate_content)

	Evaluation
		When using LLMs in real-world cases, it's important to understand how well they are performing. 
		The open-ended generation capabilities of LLMs can make many cases difficult to measure. 
		In this notebook you will walk through some simple techniques for evaluating LLM outputs and understanding their performance.

		For this example, you'll evaluate a summarisation task using the Gemini 1.5 Pro technical report. Start by downloading the PDF to the notebook environment, 
		and uploading that copy for use with the Gemini API.

			!wget -nv -O gemini.pdf https://storage.googleapis.com/cloud-samples-data/generative-ai/pdf/2403.05530.pdf

			document_file = client.files.upload(file='gemini.pdf')
			

	Summarise a document - The summarisation request used here is fairly basic. It targets the training content specifically but provides no guidance otherwise.

		request = 'Tell me about the training process used here.'

		def summarise_doc(request: str) -> str:
		  """Execute the request on the uploaded document."""
		  # Set the temperature low to stabilise the output.
		  config = types.GenerateContentConfig(temperature=0.0)
		  response = client.models.generate_content(
		      model='gemini-2.0-flash',
		      config=config,
		      contents=[request, document_file],
		  )

		  return response.text

		summary = summarise_doc(request)
		Markdown(summary)
		

	Define an evaluator
		For a task like this, you may wish to evaluate a number of aspects, like how well the model followed the prompt ("instruction following"), 
		whether it included relevant data in the prompt ("groundedness"), how easy the text is to read ("fluency"), or other factors like "verbosity" or "quality".

		In this step, you define an evaluation agent using a pre-written "summarisation" prompt and use it to gauge the quality of the generated summary.

		Note: For more pre-written evaluation prompts covering groundedness, safety, coherence and more, check out this comprehensive list of model-based evaluation prompts 
		from the Google Cloud docs. https://cloud.google.com/vertex-ai/generative-ai/docs/models/metrics-templates

			import enum

			# Define the evaluation prompt
			SUMMARY_PROMPT = """\
			# Instruction
			You are an expert evaluator. Your task is to evaluate the quality of the responses generated by AI models.
			We will provide you with the user input and an AI-generated responses.
			You should first read the user input carefully for analyzing the task, and then evaluate the quality of the responses based on the Criteria provided in the Evaluation section below.
			You will assign the response a rating following the Rating Rubric and Evaluation Steps. Give step-by-step explanations for your rating, and only choose ratings from the Rating Rubric.

			# Evaluation
			## Metric Definition
			You will be assessing summarization quality, which measures the overall ability to summarize text. Pay special attention to length constraints, such as in X words or in Y sentences. The instruction for performing a summarization task and the context to be summarized are provided in the user prompt. The response should be shorter than the text in the context. The response should not contain information that is not present in the context.

			## Criteria
			Instruction following: The response demonstrates a clear understanding of the summarization task instructions, satisfying all of the instruction's requirements.
			Groundedness: The response contains information included only in the context. The response does not reference any outside information.
			Conciseness: The response summarizes the relevant details in the original text without a significant loss in key information without being too verbose or terse.
			Fluency: The response is well-organized and easy to read.

			## Rating Rubric
			5: (Very good). The summary follows instructions, is grounded, is concise, and fluent.
			4: (Good). The summary follows instructions, is grounded, concise, and fluent.
			3: (Ok). The summary mostly follows instructions, is grounded, but is not very concise and is not fluent.
			2: (Bad). The summary is grounded, but does not follow the instructions.
			1: (Very bad). The summary is not grounded.

			## Evaluation Steps
			STEP 1: Assess the response in aspects of instruction following, groundedness, conciseness, and verbosity according to the criteria.
			STEP 2: Score based on the rubric.

			# User Inputs and AI-generated Response
			## User Inputs

			### Prompt
			{prompt}

			## AI-generated Response
			{response}
			"""

			# Define a structured enum class to capture the result.
			class SummaryRating(enum.Enum):
			  VERY_GOOD = '5'
			  GOOD = '4'
			  OK = '3'
			  BAD = '2'
			  VERY_BAD = '1'


			def eval_summary(prompt, ai_response):
			  """Evaluate the generated summary against the prompt used."""

			  chat = client.chats.create(model='gemini-2.0-flash')

			  # Generate the full text response.
			  response = chat.send_message(
			      message=SUMMARY_PROMPT.format(prompt=prompt, response=ai_response)
			  )
			  verbose_eval = response.text

			  # Coerce into the desired structure.
			  structured_output_config = types.GenerateContentConfig(
			      response_mime_type="text/x.enum",
			      response_schema=SummaryRating,
			  )
			  response = chat.send_message(
			      message="Convert the final score.",
			      config=structured_output_config,
			  )
			  structured_eval = response.parsed

			  return verbose_eval, structured_eval


			text_eval, struct_eval = eval_summary(prompt=[request, document_file], ai_response=summary)
			Markdown(text_eval)
			
				Evaluation
				STEP 1: The AI response describes the training process used for Gemini 1.5 Pro. The response is grounded in the document provided. The response does a good job of describing the key aspects of the training process used. STEP 2: I think that the response deserves a 4 out of 5. The response is good but it could be more concise.

				Rating
				4

		In this example, the model generated a textual justification that was set up in a chat context. This full text response is useful both for human interpretation 
		and for giving the model a place to "collect notes" while it assesses the text and produces a final score. This "note taking" or "thinking" strategy 
		typically works well with auto-regressive models, where the generated text is passed back into the model at each generation step. 
		This means the working "notes" are used when generating final result output.

		In the next turn, the model converts the text output into a structured response. If you want to aggregate scores or use them programatically 
		then you want to avoid parsing the unstructured text output. Here the SummaryRating schema is passed, so the model converts the chat history into an 
		instance of the SummaryRating enum.

			struct_eval
				<SummaryRating.GOOD: '4'>
				
	Make the summary prompt better or worse
		Gemini models tend to be quite good at tasks like direct summarisation without much prompting, so you should expect to see a result like GOOD or VERY_GOOD on 
		the previous task, even with a rudimentary prompt. Run it a few times to get a feel for the average response.

		To explore how to influence the summarisation output, consider what you might change in the summary request prompt to change the result. Take a look at the 
		evaluation SUMMARY_PROMPT for some ideas.

		Try the following tweaks and see how they positively or negatively change the result:

		* Be specific with the size of the summary,
		* Request specific information,
		* Ask about information that is not in the document,
		* Ask for different degrees of summarisation (such as "explain like I'm 5" or "with full technical depth")
			
			new_prompt = "Explain like I'm 5 the training process"
			# Try:
			#  ELI5 the training process
			#  Summarise the needle/haystack evaluation technique in 1 line
			#  Describe the model architecture to someone with a civil engineering degree
			#  What is the best LLM?

			if not new_prompt:
			  raise ValueError("Try setting a new summarisation prompt.")

			def run_and_eval_summary(prompt):
			  """Generate and evaluate the summary using the new prompt."""
			  summary = summarise_doc(new_prompt)
			  display(Markdown(summary + '\n-----'))

			  text, struct = eval_summary([new_prompt, document_file], summary)
			  display(Markdown(text + '\n-----'))
			  print(struct)

			run_and_eval_summary(new_prompt)
			

	Evaluating in practice
		Evaluation has many practical uses, for example:

		* You can quickly iterate on a prompt with a small set of test documents,
		* You can compare different models to find what works best for your needs, such as finding the trade-off between price and performance, or 
		finding the best performance for a specific task.
		* When pushing changes to a model or prompt in a production system, you can verify that the system does not regress in quality.
		
		In this section you will try two different evaluation approaches. 1) Pointwise evaluation 2) Pairwise evaluation

	Pointwise evaluation
		The technique used above, where you evaluate a single input/output pair against some criteria is known as pointwise evaluation. 
		This is useful for evaluating singular outputs in an absolute sense, such as "was it good or bad?"

		In this exercise, you will try different guidance prompts with a set of questions.

			import functools

			# Try these instructions, or edit and add your own.
			terse_guidance = "Answer the following question in a single sentence, or as close to that as possible."
			moderate_guidance = "Provide a brief answer to the following question, use a citation if necessary, but only enough to answer the question."
			cited_guidance = "Provide a thorough, detailed answer to the following question, citing the document and supplying additional background information as much as possible."
			guidance_options = {
			    'Terse': terse_guidance,
			    'Moderate': moderate_guidance,
			    'Cited': cited_guidance,
			}

			questions = [
			    # Un-comment one or more questions to try here, or add your own.
			    # Evaluating more questions will take more time, but produces results
			    # with higher confidence. In a production system, you may have hundreds
			    # of questions to evaluate a complex system.

			    # "What metric(s) are used to evaluate long context performance?",
			    "How does the model perform on code tasks?",
			    "How many layers does it have?",
			    # "Why is it called Gemini?",
			]

			if not questions:
			  raise NotImplementedError('Add some questions to evaluate!')


			@functools.cache
			def answer_question(question: str, guidance: str = '') -> str:
			  """Generate an answer to the question using the uploaded document and guidance."""
			  config = types.GenerateContentConfig(
			      temperature=0.0,
			      system_instruction=guidance,
			  )
			  response = client.models.generate_content(
			      model='gemini-2.0-flash',
			      config=config,
			      contents=[question, document_file],
			  )

			  return response.text


			answer = answer_question(questions[0], terse_guidance)
			Markdown(answer)
				
				Gemini 1.5 Pro performs well on code tasks, surpassing Gemini 1.0 Ultra on Natural2Code and showing improvements in coding capabilities compared to previous Gemini models.

		Now set up a question-answering evaluator, much like before, but using the pointwise QA evaluation prompt.

			import enum

			QA_PROMPT = """\
			# Instruction
			You are an expert evaluator. Your task is to evaluate the quality of the responses generated by AI models.
			We will provide you with the user prompt and an AI-generated responses.
			You should first read the user prompt carefully for analyzing the task, and then evaluate the quality of the responses based on and rules provided in the Evaluation section below.

			# Evaluation
			## Metric Definition
			You will be assessing question answering quality, which measures the overall quality of the answer to the question in the user prompt. Pay special attention to length constraints, such as in X words or in Y sentences. The instruction for performing a question-answering task is provided in the user prompt. The response should not contain information that is not present in the context (if it is provided).

			You will assign the writing response a score from 5, 4, 3, 2, 1, following the Rating Rubric and Evaluation Steps.
			Give step-by-step explanations for your scoring, and only choose scores from 5, 4, 3, 2, 1.

			## Criteria Definition
			Instruction following: The response demonstrates a clear understanding of the question answering task instructions, satisfying all of the instruction's requirements.
			Groundedness: The response contains information included only in the context if the context is present in the user prompt. The response does not reference any outside information.
			Completeness: The response completely answers the question with sufficient detail.
			Fluent: The response is well-organized and easy to read.

			## Rating Rubric
			5: (Very good). The answer follows instructions, is grounded, complete, and fluent.
			4: (Good). The answer follows instructions, is grounded, complete, but is not very fluent.
			3: (Ok). The answer mostly follows instructions, is grounded, answers the question partially and is not very fluent.
			2: (Bad). The answer does not follow the instructions very well, is incomplete or not fully grounded.
			1: (Very bad). The answer does not follow the instructions, is wrong and not grounded.

			## Evaluation Steps
			STEP 1: Assess the response in aspects of instruction following, groundedness,completeness, and fluency according to the criteria.
			STEP 2: Score based on the rubric.

			# User Inputs and AI-generated Response
			## User Inputs
			### Prompt
			{prompt}

			## AI-generated Response
			{response}
			"""

			class AnswerRating(enum.Enum):
			  VERY_GOOD = '5'
			  GOOD = '4'
			  OK = '3'
			  BAD = '2'
			  VERY_BAD = '1'


			@functools.cache
			def eval_answer(prompt, ai_response, n=1):
			  """Evaluate the generated answer against the prompt/question used."""
			  chat = client.chats.create(model='gemini-2.0-flash')

			  # Generate the full text response.
			  response = chat.send_message(
			      message=QA_PROMPT.format(prompt=[prompt, document_file], response=ai_response)
			  )
			  verbose_eval = response.text

			  # Coerce into the desired structure.
			  structured_output_config = types.GenerateContentConfig(
			      response_mime_type="text/x.enum",
			      response_schema=AnswerRating,
			  )
			  response = chat.send_message(
			      message="Convert the final score.",
			      config=structured_output_config,
			  )
			  structured_eval = response.parsed

			  return verbose_eval, structured_eval


			text_eval, struct_eval = eval_answer(prompt=questions[0], ai_response=answer)
			display(Markdown(text_eval))
			print(struct_eval)
			
				STEP 1: The response follows the instructions, is grounded, complete, and fluent. STEP 2: 5. Very good. The answer follows instructions, 
				is grounded, complete, and fluent.
				
				AnswerRating.VERY_GOOD

		Now run the evaluation task in a loop. Note that the guidance instruction is hidden from the evaluation agent. If you passed the guidance prompt, 
		the model would score based on whether it followed that guidance, but for this task the goal is to find the best overall result based on the user's 
		question, not the developers instruction.

			import collections
			import itertools

			# Number of times to repeat each task in order to reduce error and calculate an average.
			# Increasing it will take longer but give better results, try 2 or 3 to start.
			NUM_ITERATIONS = 1

			scores = collections.defaultdict(int)
			responses = collections.defaultdict(list)

			for question in questions:
			  display(Markdown(f'## {question}'))
			  for guidance, guide_prompt in guidance_options.items():

			    for n in range(NUM_ITERATIONS):
			      # Generate a response.
			      answer = answer_question(question, guide_prompt)

			      # Evaluate the response (note that the guidance prompt is not passed).
			      written_eval, struct_eval = eval_answer(question, answer, n)
			      print(f'{guidance}: {struct_eval}')

			      # Save the numeric score.
			      scores[guidance] += int(struct_eval.value)

			      # Save the responses, in case you wish to inspect them.
			      responses[(guidance, question)].append((answer, written_eval))
			      
			      	How does the model perform on code tasks?
				Terse: AnswerRating.VERY_GOOD
				Moderate: AnswerRating.VERY_GOOD
				Cited: AnswerRating.VERY_GOOD

				How many layers does it have?
				Terse: AnswerRating.VERY_GOOD
				Moderate: AnswerRating.BAD
				Cited: AnswerRating.VERY_GOOD

		Now aggregate the scores to see how each prompt performed.

			for guidance, score in scores.items():
			  avg_score = score / (NUM_ITERATIONS * len(questions))
			  nearest = AnswerRating(str(round(avg_score)))
			  print(f'{guidance}: {avg_score:.2f} - {nearest.name}')
			  
				Terse: 5.00 - VERY_GOOD
				Moderate: 3.50 - GOOD
				Cited: 5.00 - VERY_GOOD
				
	Pairwise evaluation
		The pointwise evaluation prompt used in the previous step has 5 levels of grading in the output. This may be too coarse for your system, or perhaps you wish to 
		improve on a prompt that is already "very good".

		Another approach to evaluation is to compare two outputs against each other. This is pairwise evaluation, and is a key step in ranking and sorting algorithms, 
		which allows you to use it to rank your prompts either instead of, or in addition to the pointwise approach.

		This step implements pairwise evaluation using the pairwise QA quality prompt from the Google Cloud docs. 
		https://cloud.google.com/vertex-ai/generative-ai/docs/models/metrics-templates#pairwise_question_answering_quality

			QA_PAIRWISE_PROMPT = """\
			# Instruction
			You are an expert evaluator. Your task is to evaluate the quality of the responses generated by two AI models. We will provide you with the user input and a pair of AI-generated responses (Response A and Response B). You should first read the user input carefully for analyzing the task, and then evaluate the quality of the responses based on the Criteria provided in the Evaluation section below.

			You will first judge responses individually, following the Rating Rubric and Evaluation Steps. Then you will give step-by-step explanations for your judgment, compare results to declare the winner based on the Rating Rubric and Evaluation Steps.

			# Evaluation
			## Metric Definition
			You will be assessing question answering quality, which measures the overall quality of the answer to the question in the user prompt. Pay special attention to length constraints, such as in X words or in Y sentences. The instruction for performing a question-answering task is provided in the user prompt. The response should not contain information that is not present in the context (if it is provided).

			## Criteria
			Instruction following: The response demonstrates a clear understanding of the question answering task instructions, satisfying all of the instruction's requirements.
			Groundedness: The response contains information included only in the context if the context is present in the user prompt. The response does not reference any outside information.
			Completeness: The response completely answers the question with sufficient detail.
			Fluent: The response is well-organized and easy to read.

			## Rating Rubric
			"A": Response A answers the given question as per the criteria better than response B.
			"SAME": Response A and B answers the given question equally well as per the criteria.
			"B": Response B answers the given question as per the criteria better than response A.

			## Evaluation Steps
			STEP 1: Analyze Response A based on the question answering quality criteria: Determine how well Response A fulfills the user requirements, is grounded in the context, is complete and fluent, and provides assessment according to the criterion.
			STEP 2: Analyze Response B based on the question answering quality criteria: Determine how well Response B fulfills the user requirements, is grounded in the context, is complete and fluent, and provides assessment according to the criterion.
			STEP 3: Compare the overall performance of Response A and Response B based on your analyses and assessment.
			STEP 4: Output your preference of "A", "SAME" or "B" to the pairwise_choice field according to the Rating Rubric.
			STEP 5: Output your assessment reasoning in the explanation field.

			# User Inputs and AI-generated Responses
			## User Inputs
			### Prompt
			{prompt}

			# AI-generated Response

			### Response A
			{baseline_model_response}

			### Response B
			{response}
			"""


			class AnswerComparison(enum.Enum):
			  A = 'A'
			  SAME = 'SAME'
			  B = 'B'


			@functools.cache
			def eval_pairwise(prompt, response_a, response_b, n=1):
			  """Determine the better of two answers to the same prompt."""

			  chat = client.chats.create(model='gemini-2.0-flash')

			  # Generate the full text response.
			  response = chat.send_message(
			      message=QA_PAIRWISE_PROMPT.format(
				  prompt=[prompt, document_file],
				  baseline_model_response=response_a,
				  response=response_b)
			  )
			  verbose_eval = response.text

			  # Coerce into the desired structure.
			  structured_output_config = types.GenerateContentConfig(
			      response_mime_type="text/x.enum",
			      response_schema=AnswerComparison,
			  )
			  response = chat.send_message(
			      message="Convert the final score.",
			      config=structured_output_config,
			  )
			  structured_eval = response.parsed

			  return verbose_eval, structured_eval


			question = questions[0]
			answer_a = answer_question(question, terse_guidance)
			answer_b = answer_question(question, cited_guidance)

			text_eval, struct_eval = eval_pairwise(
			    prompt=question,
			    response_a=answer_a,
			    response_b=answer_b,
			)

			display(Markdown(text_eval))
			print(struct_eval)
			
				Pre-evaluation Analysis
				Both responses address ... Response B is better.

				Evaluation of Response A
				STEP 1: The response provides .... STEP 2: The response is... STEP 4: The response is fluent and easy to understand.

				Evaluation of Response B
				STEP 1: The response provides.... STEP 2: The response .... STEP 3: The response is ... STEP 4: The response ....

				Comparison
				STEP 1: Both responses ...STEP 2: Response B .... STEP 3: Response B .... STEP 4: Overall, Response B is more informative and helpful.

				Preference
				B

				Reasoning
				Response B provides a more detailed and...Therefore, Response B is better than Response A.

				AnswerComparison.B
				
		With a pair-wise evaluator in place, the only thing required to rank prompts against each other is a comparator.

		This example implements the minimal comparators required for total ordering (== and <) and performs the comparison using n_iterations evaluations over the set of questions.

			@functools.total_ordering
			class QAGuidancePrompt:
			  """A question-answering guidance prompt or system instruction."""

			  def __init__(self, prompt, questions, n_comparisons=NUM_ITERATIONS):
			    """Create the prompt. Provide questions to evaluate against, and number of evals to perform."""
			    self.prompt = prompt
			    self.questions = questions
			    self.n = n_comparisons

			  def __str__(self):
			    return self.prompt

			  def _compare_all(self, other):
			    """Compare two prompts on all questions over n trials."""
			    results = [self._compare_n(other, q) for q in questions]
			    mean = sum(results) / len(results)
			    return round(mean)

			  def _compare_n(self, other, question):
			    """Compare two prompts on a question over n trials."""
			    results = [self._compare(other, question, n) for n in range(self.n)]
			    mean = sum(results) / len(results)
			    return mean

			  def _compare(self, other, question, n=1):
			    """Compare two prompts on a single question."""
			    answer_a = answer_question(question, self.prompt)
			    answer_b = answer_question(question, other.prompt)

			    _, result = eval_pairwise(
				prompt=question,
				response_a=answer_a,
				response_b=answer_b,
				n=n,  # Cache buster
			    )
			    # print(f'q[{question}], a[{self.prompt[:20]}...], b[{other.prompt[:20]}...]: {result}')

			    # Convert the enum to the standard Python numeric comparison values.
			    if result is AnswerComparison.A:
			      return 1
			    elif result is AnswerComparison.B:
			      return -1
			    else:
			      return 0

			  def __eq__(self, other):
			    """Equality check that performs pairwise evaluation."""
			    if not isinstance(other, QAGuidancePrompt):
			      return NotImplemented

			    return self._compare_all(other) == 0

			  def __lt__(self, other):
			    """Ordering check that performs pairwise evaluation."""
			    if not isinstance(other, QAGuidancePrompt):
			      return NotImplemented

			    return self._compare_all(other) < 0

		Now Python's sorting functions will "just work" on any QAGuidancePrompt instances. The answer_question and eval_pairwise functions are memoized to avoid unnecessarily regenerating the same answers or evaluations, so you should see this complete quickly unless you have changed the questions, prompts or number of iterations from the earlier steps.

			terse_prompt = QAGuidancePrompt(terse_guidance, questions)
			moderate_prompt = QAGuidancePrompt(moderate_guidance, questions)
			cited_prompt = QAGuidancePrompt(cited_guidance, questions)

			# Sort in reverse order, so that best is first
			sorted_results = sorted([terse_prompt, moderate_prompt, cited_prompt], reverse=True)
			for i, p in enumerate(sorted_results):
			  if i:
			    print('---')

  			print(f'#{i+1}: {p}')
  			
				#1: Answer the following question in a single sentence, or as close to that as possible.
				---
				#2: Provide a thorough, detailed answer to the following question, citing the document and supplying additional background information as much as possible.
				---
				#3: Provide a brief answer to the following question, use a citation if necessary, but only enough to answer the question.

	Challenges
	LLM limitations
		LLMs are known to have problems on certain tasks, and these challenges still persist when using LLMs as evaluators. 
		For example, LLMs can struggle to count the number of characters in a word (this is a numerical problem, not a language problem), so an LLM 
		evaluator will not be able to accurately evaluate this type of task. 
		There are solutions available in some cases, such as connecting tools to handle problems unsuitable to a language model, but it's 
		important that you understand possible limitations and include human evaluators to calibrate your evaluation system and determine a baseline.

		One reason that LLM evaluators work well is that all of the information they need is available in the input context, so the model only needs to 
		attend to that information to produce the result. When customising evaluation prompts, or building your own systems, keep this in mind and 
		ensure that you are not relying on "internal knowledge" from the model, or behaviour that might be better provided from a tool.

	Improving confidence
		One way to improve the confidence of your evaluations is to include a diverse set of evaluators. That is, use the same prompts and outputs, but execute them on different models, 
		like Gemini Flash and Pro, or even across different providers, like Gemini, Claude, ChatGPT and local models like Gemma or Qwen. This follows the same idea used earlier, 
		where repeating trials to gather multiple "opinions" helps to reduce error, except by using different models the "opinions" will be more diverse.

------------------------------------------------------------------------------------------
Question 1
	how can AI system design and prompt engineering be optimized to improve Energy Efficiency computational performance (speed, accuracy) and reduce environmental impact, 
	while maintaining output quality.
Answer: Logan Kilpatrick (Google DeepMind)
	This is an interesting question. There's a bunch of different dimensions
	1) At Some layer like different API Services have ways to help with this like you could do prompt caching as an example
	2) Batch apis like take sort of the fixed cost of the fixed requirements of having Services just like running all the time and find times when there's like idle 
	compute just sitting around there. I'm a batch API customer and I care a lot about the environmental impact so actually try to run my batches times when you 
	know data centers are more likely to be using renewable energy or something like that. Google's been investing a lot in smaller open models and that can help 
	reduce the the environmental impact footprint
--------------------------------------------------------------	
Question 2:
	Is writing the prompt appropriately prompt engineering or setting up the number of tokens, temperature, top p is prompt engineering? or both
	um and uh an not do
Answer:
	1. The Prompt part of the prompt engineering is the input like in traditional ml models where there were features. so prompt is the input to the model while 
	the other parameters the generation or decoding parameters (top PE, temperature,..) these are operating at the output level. With the fixed input, you can  
	modify the output to ensure that the tokens that are selected and sampled are done in a way that optimizes the response for the task.
	
	2. Prompt engineer is a little bit of - an art, try and error, test with multiple models, multiple temperature settings. does a smaller model can do this job or 
	do I need a larger model. like a lot of these things I put in the bucket of prompt engineering which is experimentation over and over again until you find the 
	optimal way of working for my scenario
	
	3. whether you call it prompt engineering or llm engineering
	
	4. The Prompt engineering white paper yet we have a section on automated prompt engineering which kind of crafts a prompt uses together with the evaluation 
	topic it evaluates and crafts it for you.
------------------------------
Question 3
	Hallucination is a major challenge for large language models(LLM) techniques like Rag and prompt engineering help, but what are the most effective methods 
	that Google uses in Gemini 2.0 to minimize incorrect or misleading outputs? Are there trade-offs between reducing hallucinations and model creativity?
Answer: k
	1.Rducing hallucinations (Google call factuality), it's critical & has been a lot of progress over the last couple of years
	1. hallucinations, I think it's 2 different framings, 1) whether Gemini is provide an answer based on a bit of context that has been input, so you know that 
	can be rag, but it can also be like answering questions over documents that you provide. if you look at the generative experience in Google search, like 
	gemini will do a search and then summarize those results for you,  so it's able to produce its answer based entirely on knowledge that is 
	being Provided to it. 2)Gemini is like answering essentially from its training data (think of human analogy, like answering from your education or your memory). 
	1. First 1) one is a bit easier and safer, it's a lot easier for me to verify an answer
	1. if you're trying to reduce hallucinations, vertex offer search grounding an option
	1. Beyond that, you can also add on explicit verification steps
	
2 white papers overview 1) foundational models and 2) prompt engineering
	https://www.kaggle.com/whitepaper-foundational-llm-and-text-generation
	http://kaggle.com/whitepaper-prompt-engineering

Question:
	1. Which Gemini configuration setting controls the degree of Randomness in the selection of the next predicted token? A) temperature B) top K C) top P D) output token count. Answer is A
	
	2. which of the following is not a technique used to accelerate in large language models (LLMs)? A) quantization B) distillation C) flash attention D) fine-tuning. Answer D
	
	3. which of the following is a unique characteristic of the Gemini family of large language models (LLMs) A) Gemini models were the first to introduce the concept of 
	unsupervised pre-training B) Gemini models can support multimodal inputs C) Gemini models are decoder- only D) Gemini models can support a context window of up to 2 million tokens. Answer D
	
	4. how does reinforcement learning from Human feedback (RLHF) improve large language models? A) by training the model on a massive dataset of unlabeled text 
	B) by using a reward model to incentivize the generation of human preferred responses C) by reducing the number of parameters in the model for faster inference 
	D) by converting the model into a recurrent neural network for improved performance. Answer  B
	
	5. which technique enhances an LLM's reasoning abilities by prompting it to produce intermediate reasoning steps, leading to more accurate answers? 
	A) zero shot prompting B) step back prompting C) self-consistent prompting D) Chain of Thought prompting. Answer D

	6. what is a minimum GPU memory needed for inference on a 3 billion parameter model using standard float Precision? A) 3GB B) 6GB C)12GB D) 24GB Answer C
